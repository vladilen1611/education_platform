# Generated by Django 2.0.5 on 2020-10-21 13:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(help_text='Введите текст ответа', max_length=1000, verbose_name='Содержание')),
                ('correct', models.BooleanField(default=False, help_text='Это правильный ответ?', verbose_name='Правильно')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Баллы')),
                ('correct_answer', models.CharField(max_length=10, verbose_name='Правильные ответы')),
                ('wrong_answer', models.CharField(max_length=10, verbose_name='Неправильные ответы')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Прогресс пользователя',
                'verbose_name_plural': 'Прогресс пользователя',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('figure', models.ImageField(blank=True, null=True, upload_to='uploads/%Y/%m/%d', verbose_name='Рисунок')),
                ('content', models.CharField(help_text='Введите текст вопроса, который должен отобразиться', max_length=1000, verbose_name='Вопрос')),
                ('explanation', models.TextField(blank=True, help_text='Объяснение показывается после того, как дан ответ на вопрос', max_length=2000, verbose_name='Объяснение')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
                'ordering': ['lesson'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Описание теста', verbose_name='Описание')),
                ('url', models.SlugField(help_text='url теста', max_length=60, verbose_name='url теста')),
                ('random_order', models.BooleanField(default=False, help_text='Отображать вопросы в случайном порядке или в порядке добавления?', verbose_name='Случайная порядок')),
                ('max_questions', models.PositiveIntegerField(blank=True, help_text='Количество вопросов, на которые должны быть даны ответы при каждой попытке', null=True, verbose_name='Максимальное количество вопросов')),
                ('answers_at_end', models.BooleanField(default=False, help_text='Правильный ответ НЕ показан после вопроса. Ответы отображаются после прохождения теста', verbose_name='Ответы в конце')),
                ('exam_paper', models.BooleanField(default=False, help_text='Если отмечено, результаты каждой попытки пользователя будет сохранен', verbose_name='Экзаменационный лист')),
                ('single_attempt', models.BooleanField(default=False, help_text='Если отмечено, пользователю будет разрешена только одна попытка', verbose_name='Единственная попытка')),
                ('pass_mark', models.SmallIntegerField(blank=True, default=0, help_text='Процент правильных ответов для прохождения теста', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Pass Mark')),
                ('success_text', models.TextField(blank=True, help_text='Отображается, если пользователь успешно прошел тест', verbose_name='Текст при успешном выполнении теста')),
                ('fail_text', models.TextField(blank=True, help_text='Текст при не выполнении теста', verbose_name='Текст в случае неудачи')),
                ('draft', models.BooleanField(default=False, help_text='Если отмечено, то не отображается в публичном списке и может быть взято только пользователями с соответствующим правом', verbose_name='Черновик')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Lesson', verbose_name='Урок')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесты',
            },
        ),
        migrations.CreateModel(
            name='Sitting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_order', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Порядок вопросов')),
                ('question_list', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Список вопросов')),
                ('incorrect_questions', models.CharField(blank=True, max_length=1024, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Вопросы, на которые дан неверный ответ')),
                ('current_score', models.IntegerField(verbose_name='Текущий балл')),
                ('complete', models.BooleanField(default=False, verbose_name='Завершен')),
                ('user_answers', models.TextField(blank=True, default='{}', verbose_name='Ответы пользователя')),
                ('start', models.DateTimeField(auto_now_add=True, verbose_name='Начало')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='Окончание')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.Quiz', verbose_name='Тест')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'permissions': (('view_sittings', 'Может просматривать оконченные тесты'),),
            },
        ),
        migrations.CreateModel(
            name='MCQQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
                ('answer_order', models.CharField(blank=True, choices=[('content', 'Содержание'), ('none', 'Ничего'), ('random', 'Случайно')], help_text='Порядок отображения вопросов', max_length=30, null=True, verbose_name='Порядок вопросов')),
            ],
            options={
                'verbose_name': 'Вопрос с несколькими вариантами ответов',
                'verbose_name_plural': 'Вопросы с несколькими вариантами ответов',
            },
            bases=('quiz.question',),
        ),
        migrations.AddField(
            model_name='question',
            name='lesson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Lesson', verbose_name='Урок'),
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ManyToManyField(blank=True, to='quiz.Quiz', verbose_name='Тест'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.MCQQuestion', verbose_name='Вопрос'),
        ),
    ]
